<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RexKing6&#39;s Note</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>活成我心中的样子</description>
    <pubDate>Sat, 01 Apr 2017 03:18:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>hexo主题和添加评论、打赏、搜索、阅读量、g等功能</title>
      <link>http://yoursite.com/2017/03/30/hexo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E3%80%81%E6%89%93%E8%B5%8F%E3%80%81%E6%90%9C%E7%B4%A2%E3%80%81%E9%98%85%E8%AF%BB%E9%87%8F%E7%AD%89%E5%8A%9F%E8%83%BD/</link>
      <guid>http://yoursite.com/2017/03/30/hexo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E3%80%81%E6%89%93%E8%B5%8F%E3%80%81%E6%90%9C%E7%B4%A2%E3%80%81%E9%98%85%E8%AF%BB%E9%87%8F%E7%AD%89%E5%8A%9F%E8%83%BD/</guid>
      <pubDate>Thu, 30 Mar 2017 15:09:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;以下绝大部分转载于&lt;a href=&quot;http://www.jianshu.com/p/5973c05d7100&quot; target=&quot;_blan
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>以下绝大部分转载于<a href="http://www.jianshu.com/p/5973c05d7100" target="_blank" rel="external">【干货】2个小时教你hexo博客添加评论、打赏、RSS等功能</a>，原文真是满满的干货，看完学习了许多许多，受益匪浅，在这里感谢下作者，写得太好了，以下是原文加上我自己操作中的一些东西。</p>
<h2 id="更换Hexo主题"><a href="#更换Hexo主题" class="headerlink" title="更换Hexo主题"></a>更换Hexo主题</h2><p>更换后的主题为NexT，其Github网址为：<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a> 。首先将NexT的主题源文件下载到本地，使用Git克隆指令如下：</p>
<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre><p>下载后，复制其中名称为next的文件夹到Hexo的主题目录下，主题目录的路径为：</p>
<pre><code>Hexo根目录/themes/
</code></pre><p>然后在Hexo根目录执行<strong>部署Hexo</strong>指令：</p>
<pre><code>hexo clean
hexo g
hexo d
</code></pre><h2 id="设置NexT的主题模式"><a href="#设置NexT的主题模式" class="headerlink" title="设置NexT的主题模式"></a>设置NexT的主题模式</h2><p>Hexo主题中，有三种不同的模式，通过切换模式，让NexT主题显示不一样的样式。在NexT根目录下有一个同样名称为<code>_config.yml</code><br>，为了区分hexo根目录下的<code>_config.yml</code>，将前者称为主题配置文件，在其中找到<code>scheme</code>属性，如下图所示：</p>
<p>默认的是Muse模式，我设置的是Mist，在NexT的GitHub主页上展示的是这种模式，很简洁。读者可根据自己的喜好，选择其中一种模式。</p>
<h2 id="设置预览摘要"><a href="#设置预览摘要" class="headerlink" title="设置预览摘要"></a>设置预览摘要</h2><p>设置完模式后，读者们会发现，尽管首页显示的是所有文章的列表，但是每一篇文章都显示了所有内容，这样感觉看起来不舒服，这时候可以启用预览摘要模式，在主题配置文件中找到<code>auto_excerpt</code>属性，将<code>enable</code>设置为<code>true</code> ，将<code>length</code>设置为想要预览到的字数，默认是150，如下图所示：</p>
<p>设置方面的修改完成之后，最好都重新clean-&gt;generate-&gt;deploy一下。</p>
<h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>NexT目前出到5.1.0版本，功能模块已经相当的丰富。NexT主题集成了评论系统，只需要设置相关的属性即可实现功能，其目前支持多说、Disqus、Facebook评论、Hyper评论、网页云跟帖等。这里我们使用的是另一款名为友言的评论系统，它也是NexT已经集成好的，可以直接拿来用的。下面对其操作进行讲解：</p>
<p>在这里不得不感叹下NexT的精妙，可供使用者修改的地方非常多，修改添加的时候又特别方便，添加的时候只要去掉注释就好了。</p>
<h2 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h2><p>打赏是读者对笔者支持的最大动力，作为经常写博客的笔者来说，打赏功能如果在自己的博客中出现，那真的是求之不得呀（虽然基本不会有人来打赏）！而NexT正好集成了打赏的功能，其实现的思路是放上收款二维码，让读者扫码后支付。笔者添加了微信支付和支付宝支付，所以以此为例：</p>
<h3 id="获取微信收款二维码"><a href="#获取微信收款二维码" class="headerlink" title="获取微信收款二维码"></a>获取微信收款二维码</h3><p>微信二维码的获取途径还是比较容易的，按照这个教程即可实现，读者们也可以预先设置收款的金额。</p>
<h3 id="获取支付宝收款二维码"><a href="#获取支付宝收款二维码" class="headerlink" title="获取支付宝收款二维码"></a>获取支付宝收款二维码</h3><p>笔者上网查了很多关于支付宝收款二维码的相关信息，奈何得到的结果不是版本不一致就是商家认证，找了好久，终于找到一个符合要求的教程，读者们可别被“商家平台”这几个字吓到了，普通用户一样可以开通，且不需要相关证件的认证，读者们可根据这个教程获得自己的支付宝收款二维码。</p>
<h3 id="添加二维码图片资源"><a href="#添加二维码图片资源" class="headerlink" title="添加二维码图片资源"></a>添加二维码图片资源</h3><p>得到二维码图片资源后，读者们可将二维码图片放到NexT根目录/source/images/文件夹下。</p>
<h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>找到主题配置文件，在其最后添加打赏的配置信息:</p>
]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/30/hexo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E3%80%81%E6%89%93%E8%B5%8F%E3%80%81%E6%90%9C%E7%B4%A2%E3%80%81%E9%98%85%E8%AF%BB%E9%87%8F%E7%AD%89%E5%8A%9F%E8%83%BD/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo绑定阿里云二级域名</title>
      <link>http://yoursite.com/2017/03/28/hexo%E7%BB%91%E5%AE%9A%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/</link>
      <guid>http://yoursite.com/2017/03/28/hexo%E7%BB%91%E5%AE%9A%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/</guid>
      <pubDate>Tue, 28 Mar 2017 06:32:07 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;昨天总算在GitHub搭起来了自己的博客，但是在GitHub下总是有些不爽，想绑定在自己阿里云买的一个域名。&lt;/p&gt;
&lt;h2 id=&quot;阿里云
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>昨天总算在GitHub搭起来了自己的博客，但是在GitHub下总是有些不爽，想绑定在自己阿里云买的一个域名。</p>
<h2 id="阿里云解析"><a href="#阿里云解析" class="headerlink" title="阿里云解析"></a>阿里云解析</h2><p>来到阿里云控制台 -&gt; 云解析：</p>
<p><img src="/2017/03/28/hexo绑定阿里云二级域名/hexo_1.png" alt="控制台"></p>
<p>打开要绑定的域名，来到域名控制台：</p>
<p><img src="/2017/03/28/hexo绑定阿里云二级域名/hexo_2.png" alt="添加解析"></p>
<p>记录类型选择CNAME，主机记录填二级域名，比如blog.rexking6.top就填blog，记录值填之前GitHub映射的那个网址，我的是<code>rexking6.github.io</code>，点击保存。</p>
<h2 id="项目里添加CNAME"><a href="#项目里添加CNAME" class="headerlink" title="项目里添加CNAME"></a>项目里添加CNAME</h2><p>到这里还没结束，需要在GitHub的项目里添加CNAME文件，填写你的二级域名，比如我的就是blog.rexking6.top。</p>
<p><img src="/2017/03/28/hexo绑定阿里云二级域名/hexo_3.png" alt="CNAME"><br>这里不建议直接在GitHub上直接添加，因为本地同步过去的时候，又会把CNAME删除了，所以还是在本地添加后，同步。这里添加CNAME的位置是：<strong>source里，与_posts同级</strong>。</p>
<p>这样之后，就可以顺利地通过你自己的域名访问到hexo博客了。</p>
]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/28/hexo%E7%BB%91%E5%AE%9A%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo的图片以及图床</title>
      <link>http://yoursite.com/2017/03/28/hexo%E7%9A%84%E5%9B%BE%E7%89%87%E4%BB%A5%E5%8F%8A%E5%9B%BE%E5%BA%8A/</link>
      <guid>http://yoursite.com/2017/03/28/hexo%E7%9A%84%E5%9B%BE%E7%89%87%E4%BB%A5%E5%8F%8A%E5%9B%BE%E5%BA%8A/</guid>
      <pubDate>Tue, 28 Mar 2017 00:59:50 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;hexo要插入图片一般有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储在本地的网站文件夹&lt;/li&gt;
&lt;li&gt;使用图床，插入时用外链url即可&lt;/
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>hexo要插入图片一般有两种方式：</p>
<ul>
<li>存储在本地的网站文件夹</li>
<li>使用图床，插入时用外链url即可</li>
</ul>
<h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>先说第一种，hexo本地和上传到GitHub后的目录结构不相同，所以这路径是比较难编写的。要想最后部署后能看到图片，在本地写markdown时，图片就会显示失败。有没有什么两全其美的方法呢？有。</p>
<h2 id="hexo-asset-image"><a href="#hexo-asset-image" class="headerlink" title="hexo-asset-image"></a>hexo-asset-image</h2><p>先将 _config.yml 的post_asset_folder改为true，然后运行以下命令：</p>
<pre><code>npm install https://github.com/CodeFalling/hexo-asset-image --save
</code></pre><p>安装完成后，新建文章后，将会是这种结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo搭建github技术博客</div><div class="line">├── hexo_1.png</div><div class="line">└── hexo_2.png</div><div class="line">hexo搭建github技术博客.md</div></pre></td></tr></table></figure>
<p>这样的目录结构（目录名和文章名一致），只要使用 <code>![图片名称](hexo搭建github技术博客/hexo_1.png)</code>就可以插入图片。</p>
<p>同时，生成的 html 是</p>
<pre><code>&lt;img src=&quot;/2017/03/27/hexo搭建github技术博客/hexo_1.png&quot; alt=&quot;查询福昕&quot;&gt;
</code></pre><p>而不是之前丑陋的相对链接。</p>
<p>另外，值得一提的是，这个插件对于 CodeFalling/hexo-renderer-org 同样有效。以上的内容参考 <a href="http://www.tuicool.com/articles/umEBVfI" target="_blank" rel="external">在 hexo 中无痛使用本地图片</a> 。</p>
<h2 id="七牛云图床"><a href="#七牛云图床" class="headerlink" title="七牛云图床"></a>七牛云图床</h2><p>看网上很多人都推荐七牛云，我自己没用过别的，就直接用了。每个月有10G免费，我的博客应该没人来看，是够用的。</p>
<p>注册，新建存储空间</p>
<p><img src="/2017/03/28/hexo的图片以及图床/hexo_1.png" alt="新建存储空间"></p>
<p>然后是镜像存储，什么是镜像存储呢？</p>
<p>镜像存储是指你网站的数据在存储在自己服务器上的情况下，额外使用七牛云存储作为镜像服务器，让网站的用户每次访问的时候都从七牛云存储上读取。如果七牛云存储上没有用户需要读取的数据，则七牛的服务器会从源站拉取资源，然后再返回给网站的用户。</p>
<p>网站上的图片，CSS，JS 这些文件一般都是不太修改，使用镜像存储把这些静态文件资源镜像到七牛的服务器，网站用户访问的时候就直接从七牛的服务器上读取数据，这样可以<strong>大大降低网站服务器读取数据的压力和大大提高网站的速度</strong>，并且并不影响博客的原来使用体验，原来怎么上传图片还是继续在网站中怎么操作即可。</p>
<p><img src="/2017/03/28/hexo的图片以及图床/hexo_2.png" alt="镜像存储"></p>
<p>镜像源填自己的网站，这样设定之后，每次更新网站的内容后，就可以通过<strong>七牛云给的三级域名+相同路径</strong>访问到自己网站的相同内容（我的是<code>onh78q2s5.bkt.clouddn.com</code>）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于图片的使用方法，就写到这里，对七牛云这家公司突然心生敬佩，刚好在春招，投一发实习简历去！</p>
]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/28/hexo%E7%9A%84%E5%9B%BE%E7%89%87%E4%BB%A5%E5%8F%8A%E5%9B%BE%E5%BA%8A/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo搭建github技术博客</title>
      <link>http://yoursite.com/2017/03/27/hexo%E6%90%AD%E5%BB%BAgithub%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</link>
      <guid>http://yoursite.com/2017/03/27/hexo%E6%90%AD%E5%BB%BAgithub%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</guid>
      <pubDate>Mon, 27 Mar 2017 11:54:13 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;之前在CSDN写过几篇博客，但是一直觉得界面不够简洁，写博客的时候不太爽，想自己搭个人博客写，趁这个机会接触了hexo，记录下来。&lt;/p&gt;

      
      </description>
      
      <content:encoded><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>之前在CSDN写过几篇博客，但是一直觉得界面不够简洁，写博客的时候不太爽，想自己搭个人博客写，趁这个机会接触了hexo，记录下来。</p>
<p>PS: 以下过程是以Windows系统，大多数参考<a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="external">手把手教你建github技术博客</a>，我按照自己的实际情况重新整理了一下。用Mac OS的同学可以参考<a href="http://www.jianshu.com/p/e99ed60390a8" target="_blank" rel="external">20分钟教你使用hexo搭建github博客</a>。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载 <a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a> 和 <a href="https://nodejs.org/en/download" target="_blank" rel="external">Node.js</a> 并执行安装</p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<p>由于新版的Node.js已经集成了npm，所以之前npm也一并安装好了。Windows我比较喜欢用PowerShell，包含了一些Linux的命令，也可以用vim。<br>然后使用npm安装hexo：</p>
<pre><code>npm install -g hexo
</code></pre><p>安装过程中我是出现了一个warning：This package is no longer maintained，暂时可以无视。</p>
<h2 id="创建hexo文件并安装依赖包"><a href="#创建hexo文件并安装依赖包" class="headerlink" title="创建hexo文件并安装依赖包"></a>创建hexo文件并安装依赖包</h2><p>安装完成后，在该文件夹内执行以下命令，将在当前目录建立网站所需要的所有文件</p>
<pre><code>hexo init
</code></pre><p>看到：</p>
<pre><code>INFO    Start blogging with Hexo!
</code></pre><p>说明建立完成，执行以下命令，安装所需依赖：</p>
<pre><code>npm install
</code></pre><h2 id="本地浏览"><a href="#本地浏览" class="headerlink" title="本地浏览"></a>本地浏览</h2><pre><code>hexo generate
hexo server
</code></pre><p>这里hexo默认用的是本地的4000端口，我第一次开启后发现访问不了，想了一下应该是已经被占用了，查询：</p>
<pre><code>netstat -aon | grep 4000
tasklist | grep 上条命令结果最后的PID
</code></pre><p><img src="/2017/03/27/hexo搭建github技术博客/hexo_1.png" alt="查询福昕"></p>
<p>是福昕，所以手动改下端口：</p>
<pre><code>hexo s -p 5000
</code></pre><p>这里的s是server的缩写，下面会给出常用的缩写，在上面的命令执行后，浏览器访问：127.0.0.1:5000，可以看到本地的博客已经搭建起来了。下面我们要做的是部署到GitHub上。</p>
<h2 id="新建网站项目目录"><a href="#新建网站项目目录" class="headerlink" title="新建网站项目目录"></a>新建网站项目目录</h2><p><img src="/2017/03/27/hexo搭建github技术博客/hexo_2.png" alt="新建目录"></p>
<p>注意格式，<code>yourname.github.io</code></p>
<h2 id="生成SSH密钥并添加"><a href="#生成SSH密钥并添加" class="headerlink" title="生成SSH密钥并添加"></a>生成SSH密钥并添加</h2><p>ssh-keygen -t rsa -C “你的邮箱地址”，按3个回车，密码为空。在C:\Users\Administrator.ssh下，得到两个文件id_rsa和id_rsa.pub。打开id_rsa.pub，复制全文。<a href="https://github.com/settings/keys" target="_blank" rel="external">Add SSH key</a>，粘贴进去。</p>
<h2 id="hexo目录结构"><a href="#hexo目录结构" class="headerlink" title="hexo目录结构"></a>hexo目录结构</h2><p>├── .deploy #需要部署的文件<br>├── node_modules #Hexo插件<br>├── public #生成的静态网页文件<br>├── scaffolds #模板<br>├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里<br>| ├── _drafts #草稿<br>| └── _posts #文章<br>├── themes #主题<br>├── _config.yml #全局配置文件<br>└── package.json</p>
<h2 id="全局配置-config-yml"><a href="#全局配置-config-yml" class="headerlink" title="全局配置 _config.yml"></a>全局配置 _config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: http://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"># Site #站点信息</div><div class="line">title:  #标题</div><div class="line">subtitle:  #副标题</div><div class="line">description:  #站点描述，给搜索引擎看的</div><div class="line">author:  #作者</div><div class="line">email:  #电子邮箱</div><div class="line">language:  #语言</div><div class="line"># URL #链接格式</div><div class="line">url:  #网址</div><div class="line">root: / #根目录</div><div class="line">permalink: :year/:month/:day/:title/ #文章的链接格式</div><div class="line">tag_dir: tags #标签目录</div><div class="line">archive_dir: archives #存档目录</div><div class="line">category_dir: categories #分类目录</div><div class="line">code_dir: downloads/code</div><div class="line">permalink_defaults:</div><div class="line"># Directory #目录</div><div class="line">source_dir: source #源文件目录</div><div class="line">public_dir: public #生成的网页文件目录</div><div class="line"># Writing #写作</div><div class="line">new_post_name: :title.md #新文章标题</div><div class="line">default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</div><div class="line">titlecase: false #标题转换成大写</div><div class="line">external_link: true #在新选项卡中打开连接</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">highlight: #语法高亮</div><div class="line">  enable: true #是否启用</div><div class="line">  line_number: true #显示行号</div><div class="line">  tab_replace:</div><div class="line"># Category &amp; Tag #分类和标签</div><div class="line">default_category: uncategorized #默认分类</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"># Archives</div><div class="line">2: 开启分页</div><div class="line">1: 禁用分页</div><div class="line">0: 全部禁用</div><div class="line">archive: 2</div><div class="line">category: 2</div><div class="line">tag: 2</div><div class="line"># Server #本地服务器</div><div class="line">port: 4000 #端口号</div><div class="line">server_ip: localhost #IP 地址</div><div class="line">logger: false</div><div class="line">logger_format: dev</div><div class="line"># Date / Time format #日期时间格式</div><div class="line">date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/</div><div class="line">time_format: H:mm:ss</div><div class="line"># Pagination #分页</div><div class="line">per_page: 10 #每页文章数，设置成 0 禁用分页</div><div class="line">pagination_dir: page</div><div class="line"># Disqus #Disqus评论，替换为多说</div><div class="line">disqus_shortname:</div><div class="line"># Extensions #拓展插件</div><div class="line">theme: #主题</div><div class="line">exclude_generator:</div><div class="line">plugins: #插件，例如生成 RSS 和站点地图的</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-sitemap</div><div class="line"># Deployment #部署，将 lmintlcx 改成用户名</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: 刚刚github创库地址.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>冒号:后面都有一个空格</li>
<li>repo: 刚刚github创库地址.git</li>
</ul>
<h2 id="hexo常用命令："><a href="#hexo常用命令：" class="headerlink" title="hexo常用命令："></a>hexo常用命令：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hexo help #查看帮助</div><div class="line">hexo init #初始化一个目录</div><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成网页，可以在 public 目录查看整个网站的文件</div><div class="line">hexo server #本地预览，&apos;Ctrl+C&apos;关闭</div><div class="line">hexo deploy #部署.deploy目录</div><div class="line">hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</div></pre></td></tr></table></figure>
<h2 id="简写："><a href="#简写：" class="headerlink" title="简写："></a>简写：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><pre><code>hexo new &quot;标题&quot;
</code></pre><p>在 _posts 目录下会生成文件标题.md</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hello World</div><div class="line">date: 2015-07-30 07:56:29 #发表日期，一般不改动</div><div class="line">categories: hexo #文章文类</div><div class="line">tags: [hexo,github] #文章标签，多于一项时用这种格式</div><div class="line">---</div></pre></td></tr></table></figure>
<p>正文，使用Markdown语法书写，编辑完后保存，hexo server 预览</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>执行下列指令即可完成部署。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>这里我deploy时，没有成功，出现了一个错误</p>
<pre><code>ERROR Deployer not found: git
</code></pre><p>原来是需要装这个：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>再执行，出现以下提示，说明部署完成：</p>
<pre><code>[info] Deploy done: git
</code></pre><p>点击 Github 上项目的 Settings，GitHub Pages，提示Your site is published at <a href="https://rexking6.github.io/" target="_blank" rel="external">https://rexking6.github.io/</a> (这是我自己的)</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在搭建博客的过程中，发现hexo真是简单好用啊，对于我这种没学过前端的，真是神器啊。也体会到了github能部署网站的厉害之处，之后想把两个网站来作个部署记录，还有绑定阿里域名和图床，也都会写出来。</p>
]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/27/hexo%E6%90%AD%E5%BB%BAgithub%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Diffie-Hellman密钥交换算法及其优化</title>
      <link>http://yoursite.com/2017/03/18/Diffie-Hellman%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</link>
      <guid>http://yoursite.com/2017/03/18/Diffie-Hellman%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Sat, 18 Mar 2017 04:26:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;转载：&lt;a href=&quot;http://www.cnblogs.com/si812cn/archive/2009/11/26/1611272.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;共享密钥-Diffie-Hellman算法&lt;/a&gt;&lt;/p&gt;

      
      </description>
      
      <content:encoded><![CDATA[<p>转载：<a href="http://www.cnblogs.com/si812cn/archive/2009/11/26/1611272.html" target="_blank" rel="external">共享密钥-Diffie-Hellman算法</a></p>
<p>首次发表的公开密钥算法出现在Diffie和Hellman的论文中，这篇影响深远的论文奠定了公开密钥密码编码学。由于该算法本身限于密钥交换的用途，被许多商用产品用作密钥交换技术，因此该算法通常称之为Diffie-Hellman密钥交换。这种密钥交换技术的目的在于使得两个用户安全地交换一个秘密密钥以便用于以后的报文加密。</p>
<p>Diffie-Hellman密钥交换算法的有效性依赖于计算离散对数的难度。简言之，可以如下定义离散对数：首先定义一个素数p的原根，为其各次幂产生从1 到p-1的所有整数根，也就是说，如果a是素数p的一个原根，那么数值</p>
<p>a mod p, a<sup>2</sup> mod p, …, a<sup>p-1</sup> mod p</p>
<p>是各不相同的整数，并且以某种排列方式组成了从1到p-1的所有整数。</p>
<p>对于一个整数b和素数p的一个原根a，可以找到惟一的指数i，使得</p>
<p>b = a<sup>i</sup> mod p     其中0 ≤ i ≤ (p-1)</p>
<p>指数i称为b的以a为基数的模p的离散对数或者指数。该值被记为inda ,p(b)。<br>基于此背景知识，可以定义Diffie-Hellman密钥交换算法。该算法描述如下：</p>
<p>1、有两个全局公开的参数，一个素数q和一个整数a，a是q的一个原根。</p>
<p>2、假设用户A和B希望交换一个密钥，用户A选择一个作为私有密钥的随机数XA\<q，并计算公开密钥ya=a<sup>XA mod q。A对XA的值保密存放而使YA能被B公开获得。类似地，用户B选择一个私有的随机数XB\<q，并计算公开密钥yb=a<sup>XB mod q。B对XB的值保密存放而使YB能被A公开获得。<br>3、用户A产生共享秘密密钥的计算方式是K = (YB)<sup>XA</sup> mod q。同样，用户B产生共享秘密密钥的计算是K = (YA)<sup>XB</sup> mod q。这两个计算产生相同的结果：<br>              K = (YB)<sup>XA</sup> mod q<br>                = (a<sup>XB</sup> mod q)<sup>XA</sup> mod q<br>                = (a<sup>XB</sup>)<sup>XA</sup> mod q （根据取模运算规则得到）<br>                = a<sup>XBXA</sup> mod q<br>                = (a<sup>XA</sup>)<sup>XB</sup> mod q<br>                = (a<sup>XA</sup> mod q)<sup>XB</sup> mod q<br>                = (YA)<sup>XB</sup> mod q</q，并计算公开密钥yb=a<sup></q，并计算公开密钥ya=a<sup></p>
<p>因此相当于双方已经交换了一个相同的秘密密钥。</p>
<p>4、因为XA和XB是保密的，一个敌对方可以利用的参数只有q、a、YA和YB。因而敌对方被迫取离散对数来确定密钥。例如，要获取用户B的秘密密钥，敌对方必须先计算：</p>
<p>XB = ind<sub>a ,q</sub>(YB)</p>
<p>然后再使用用户B采用的同样方法计算其秘密密钥K。</p>
<p>Diffie-Hellman密钥交换算法的安全性依赖于这样一个事实：虽然计算以一个素数为模的指数相对容易，但计算离散对数却很困难。对于大的素数，计算出离散对数几乎是不可能的。</p>
<p>下面给出例子。密钥交换基于素数q = 97和97的一个原根a = 5。A和B分别选择私有密钥XA = 36和XB = 58。每人计算其公开密钥：</p>
<p>YA = 536 = 50 mod 97<br>YB = 558 = 44 mod 97</p>
<p>在他们相互获取了公开密钥之后，各自通过计算得到双方共享的秘密密钥如下：</p>
<p>K = (YB)<sup>XA</sup> mod 97 = 4436 = 75 mod 97<br>K = (YA)<sup>XB</sup> mod 97 = 5058 = 75 mod 97</p>
<p>从|50，44|出发，攻击者要计算出75很不容易。</p>
<p>假设用户A希望与用户B建立一个连接，并用一个共享的秘密密钥加密在该连接上传输的报文。用户A产生一个一次性的私有密钥XA，并计算出公开密钥YA并将其发送给用户B。用户B产生一个私有密钥XB，计算出公开密钥YB并将它发送给用户A作为响应。必要的公开数值q和a都需要提前知道。另一种方法是用户A选择q和a的值，并将这些数值包含在第一个报文中。</p>
<p>下面再举一个使用Diffie-Hellman算法的例子。假设有一组用户（例如一个局域网上的所有用户），每个人都产生一个长期的私有密钥XA，并计算一个公开密钥YA。这些公开密钥数值，连同全局公开数值q和a都存储在某个中央目录中。在任何时刻，用户B都可以访问用户A 的公开数值，计算一个秘密密钥，并使用这个密钥发送一个加密报文给A。如果中央目录是可信任的，那么这种形式的通信就提供了保密性和一定程度的鉴别功能。因为只有A和B可以确定这个密钥，其它用户都无法解读报文（保密性）。接收方A知道只有用户B才能使用此密钥生成这个报文（鉴别）。</p>
<p>Diffie-Hellman算法具有两个吸引力的特征：</p>
<ul>
<li>仅当需要时才生成密钥，减小了将密钥存储很长一段时间而致使遭受攻击的机会。</li>
<li>除对全局参数的约定外，密钥交换不需要事先存在的基础结构。</li>
</ul>
<p>然而，该技术也存在许多不足：</p>
<ul>
<li>没有提供双方身份的任何信息。</li>
<li>它是计算密集性的，因此容易遭受阻塞性攻击，即对手请求大量的密钥。受攻击者花费了相对多的计算资源来求解无用的幂系数而不是在做真正的工作。</li>
<li>没办法防止重演攻击。</li>
<li>容易遭受中间人的攻击。第三方C在和A通信时扮演B；和B通信时扮演A。A和B都与C协商了一个密钥，然后C就可以监听和传递通信量。<br>中间人的攻击按如下进行：</li>
</ul>
<p>（1）B在给A的报文中发送他的公开密钥。</p>
<p>（2）C截获并解析该报文。C将B的公开密钥保存下来并给A发送报文，该报文具有B的用户ID但使用C的公开密钥YC，仍按照好像是来自B的样子被发送出去。A收到C的报文后，将YC和B的用户ID存储在一块。类似地，C使用YC向B发送好像来自A的报文。</p>
<p>（3）B基于私有密钥XB和YC计算秘密密钥K1。A基于私有密钥XA和YC计算秘密密钥K2。C使用私有密钥XC和YB计算K1，并使用XC和YA计算K2。</p>
<p>（4）从现在开始，C就可以转发A发给B的报文或转发B发给A的报文，在途中根据需要修改它们的密文。使得A和B都不知道他们在和C共享通信。</p>
<p>Oakley算法是对Diffie-Hellman密钥交换算法的优化，它保留了后者的优点，同时克服了其弱点。</p>
<p>Oakley算法具有五个重要特征：</p>
<ul>
<li>它采用称为cookie程序的机制来对抗阻塞攻击。</li>
<li>它使得双方能够协商一个全局参数集合。</li>
<li>它使用了现时来保证抵抗重演攻击。</li>
<li>它能够交换Diffie-Hellman公开密钥。</li>
<li>它对Diffie-Hellman交换进行鉴别以对抗中间人的攻击。</li>
</ul>
<p>Oakley可以使用三个不同的鉴别方法：</p>
<ul>
<li>数字签名：通过签署一个相互可以获得的散列代码来对交换进行鉴别；每一方都使用自己的私钥对散列代码加密。散列代码是在一些重要参数上生成的，如用户ID和现时。</li>
<li>公开密钥加密：通过使用发送者的私钥对诸如ID和现时等参数进行加密来鉴别交换。</li>
<li>对称密钥加密：通过使用某种共享密钥对交换参数进行对称加密，实现交换的鉴别。</li>
</ul>
]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/18/Diffie-Hellman%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
